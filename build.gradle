/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'marek5050' at '10/27/16 12:25 PM' with Gradle 2.14.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

apply plugin: 'java'

repositories{
    mavenCentral()
}


dependencies {
    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
}

sourceSets {
    test {
        java.srcDirs = ['src/main/java']
    }
}
test {
    testLogging.showStandardStreams = true


    // listen to events in the test execution lifecycle
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }


    // listen to standard out and standard error of the test JVM(s)
    afterTest { desc, result ->
        println "Test: ${desc.name} [${desc.className}] with result: ${result.resultType} ${result.getEndTime() - result.getStartTime()} ms"
    }

    testLogging {
//        // set options for log level LIFECYCLE
//        events "passed", "skipped", "failed", "standardOut"
//        showExceptions true
//        exceptionFormat "full"
//        showCauses true
//        showStackTraces true
//
//        // set options for log level DEBUG and INFO
//        debug {
//            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
//            exceptionFormat "full"
//        }
//        info.events = debug.events
//        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*Tests"
    }
}